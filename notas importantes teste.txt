https://wiki.sicredi.io/display/HDEDS/Golden+Paths

https://teams.sicredi.io/secure/Dashboard.jspa


teste alterando
teste alterando
teste alterando
teste alterando
teste alterando
teste alterando

import br.com.sicredi.pix.core.repository.RecorrenciaInstrucaoPagamentoCancelamentoRepository;
import br.com.sicredi.pix.core.service.impl.ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Slice;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest {

    private RecorrenciaInstrucaoPagamentoCancelamentoRepository repository;
    private ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl service;

    @BeforeEach
    void setUp() {
        repository = mock(RecorrenciaInstrucaoPagamentoCancelamentoRepository.class);

        // Simula uma instância do service que tenha acesso ao método privado/protegido
        service = spy(new ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl(null));
        doReturn(repository).when(service).getRecorrenciaInstrucaoPagamentoCancelamentoRepository(); // adapte conforme necessário
    }

    @Test
    void deveProcessarPaginasComConteudo() {
        // Arrange
        var dataLimite = LocalDateTime.now().minusHours(12);
        var conteudoPagina1 = List.of("abc123", "def456");
        var conteudoPagina2 = List.of("ghi789");

        Slice<String> slice1 = mock(Slice.class);
        when(slice1.getContent()).thenReturn(conteudoPagina1);
        when(slice1.hasContent()).thenReturn(true);

        Slice<String> slice2 = mock(Slice.class);
        when(slice2.getContent()).thenReturn(conteudoPagina2);
        when(slice2.hasContent()).thenReturn(true);

        Slice<String> sliceVazio = mock(Slice.class);
        when(sliceVazio.hasContent()).thenReturn(false);

        // Simula retorno paginado
        when(repository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                any(), any(), any(), any()))
            .thenReturn(slice1)  // página 0
            .thenReturn(slice2)  // página 1
            .thenReturn(sliceVazio); // página 2

        // Mock do método que processa os dados
        doNothing().when(service).atualizarStatusCancelamento(anyList());

        // Act
        service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

        // Assert: verifica que o método foi chamado para cada página com conteúdo
        ArgumentCaptor<List<String>> captor = ArgumentCaptor.forClass(List.class);
        verify(service, times(2)).atualizarStatusCancelamento(captor.capture());

        List<List<String>> chamadas = captor.getAllValues();
        assertEquals(2, chamadas.size());
        assertEquals(conteudoPagina1, chamadas.get(0));
        assertEquals(conteudoPagina2, chamadas.get(1));
    }
}



-----------------------------------------------------------------


package io.sicredi.spirecorrencia.api.automatico.instrucaopagamentocancelamento;

import br.com.sicredi.spicanais.transacional.transport.lib.commons.enums.TipoPessoaEnum;
import io.sicredi.spirecorrencia.api.automatico.SolicitacaoAutorizacaoRecorrencia;
import io.sicredi.spirecorrencia.api.automatico.SolicitacaoAutorizacaoRecorrenciaRepository;
import io.sicredi.spirecorrencia.api.automatico.enums.TipoStatusSolicitacaoAutorizacao;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest {

    @InjectMocks
    private ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl service;

    @Mock
    private RecorrenciaInstrucaoPagamentoCancelamentoRepository repository;


    @Test
    void deveProcessarPaginasComConteudo() {
        // Arrange
        List<String> conteudoPagina1 = List.of("abc123", "def456");
        List<String> conteudoPagina2 = List.of("ghi789");

        Page<String> pagina1 = new PageImpl<>(conteudoPagina1, PageRequest.of(0, 10), 20);
        Page<String> pagina2 = new PageImpl<>(conteudoPagina2, PageRequest.of(1, 10), 20);
        Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(2, 10), 20);

        when(repository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                any(), any(), any(), any()))
                .thenReturn(pagina1)
                .thenReturn(pagina2)
                .thenReturn(paginaVazia);

        doNothing().when(service).atualizarStatusCancelamento(anyList());

        // Act
        service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

        // Assert
        verify(service, times(2)).atualizarStatusCancelamento(anyList());
    }

}

--------------------------------------------

WARNING: A Java agent has been loaded dynamically (C:\Users\soares_diogo\.gradle\caches\modules-2\files-2.1\net.bytebuddy\byte-buddy-agent\1.14.18\417558ea01fe9f0e8a94af28b9469d281c4e3984\byte-buddy-agent-1.14.18.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release


Argument passed to when() is not a mock!
Example of correct stubbing:
    doThrow(new RuntimeException()).when(mock).someMethod();
org.mockito.exceptions.misusing.NotAMockException: 
Argument passed to when() is not a mock!
Example of correct stubbing:
    doThrow(new RuntimeException()).when(mock).someMethod();
	at io.sicredi.spirecorrencia.api.automatico.instrucaopagamentocancelamento.ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest.deveProcessarPaginasComConteudo(ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

--------------------------------------------

package io.sicredi.spirecorrencia.api.automatico.instrucaopagamentocancelamento;

import io.sicredi.spirecorrencia.api.repositorio.RecorrenciaTransacaoRepository;
import io.sicredi.spirecorrencia.api.automatico.instrucaopagamento.RecorrenciaInstrucaoPagamentoRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.transaction.support.TransactionTemplate;

import java.time.LocalDateTime;
import java.util.List;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest {

    @Mock
    private RecorrenciaInstrucaoPagamentoCancelamentoRepository cancelamentoRepository;

    @Mock
    private RecorrenciaInstrucaoPagamentoRepository pagamentoRepository;

    @Mock
    private RecorrenciaTransacaoRepository transacaoRepository;

    @Mock
    private TransactionTemplate transactionTemplate;

    @InjectMocks
    private ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl service;

    private List<String> codigosPagina1;
    private List<String> codigosPagina2;
    private Page<String> page1;
    private Page<String> page2;
    private Page<String> emptyPage;

    @BeforeEach
    void setUp() {
        codigosPagina1 = List.of("abc123", "def456");
        codigosPagina2 = List.of("ghi789");
        page1 = new PageImpl<>(codigosPagina1, PageRequest.of(0, 1000), 3000);
        page2 = new PageImpl<>(codigosPagina2, PageRequest.of(1, 1000), 3000);
        emptyPage = new PageImpl<>(List.of(), PageRequest.of(2, 1000), 3000);
    }

    @Test
    void deveProcessarPaginasComConteudo() {
        // Arrange: simula 3 páginas (duas com conteúdo, uma vazia)
        when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                any(PageRequest.class),
                eq("PAGADOR"),
                anyList(),
                any(LocalDateTime.class)
        )).thenReturn(page1).thenReturn(page2).thenReturn(emptyPage);

        // Simula execução da transação (evita NullPointer se a lógica tiver uso de transactionTemplate)
        when(transactionTemplate.execute(any())).then(invocation -> {
            var callback = invocation.getArgument(0);
            return callback.doInTransaction(null);
        });

        // Act
        service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

        // Assert: verifica se o método que atualiza os status foi chamado 2 vezes com as listas corretas
        verify(cancelamentoRepository, times(3)).getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(any(), any(), any(), any());
    }
}


@Test
void devePararQuandoPrimeiraPaginaNaoTemConteudo() {
    // Arrange: primeira página já vem vazia
    Page<String> emptyPage = new PageImpl<>(List.of(), PageRequest.of(0, 1000), 0);

    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(PageRequest.class),
            eq("PAGADOR"),
            anyList(),
            any(LocalDateTime.class)
    )).thenReturn(emptyPage);

    // Act
    service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

    // Assert: garante que não houve chamadas adicionais ou atualizações
    verify(cancelamentoRepository, times(1))
            .getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(any(), any(), any(), any());
    verifyNoMoreInteractions(cancelamentoRepository);
}

----------------------------------------
@Test
void deveIgnorarErroQuandoRepositorioLancaExcecao() {
    // Arrange
    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(PageRequest.class),
            eq("PAGADOR"),
            anyList(),
            any(LocalDateTime.class)
    )).thenThrow(new RuntimeException("Erro no banco"));

    // Act & Assert
    assertDoesNotThrow(() -> service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService());
}

@Test
void deveProcessarSomenteUmaPaginaComConteudo() {
    // Arrange
    Page<String> paginaUnica = new PageImpl<>(List.of("xpto123"), PageRequest.of(0, 1000), 1);
    Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(1, 1000), 1);

    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(PageRequest.class),
            eq("PAGADOR"),
            anyList(),
            any(LocalDateTime.class)
    )).thenReturn(paginaUnica).thenReturn(paginaVazia);

    when(transactionTemplate.execute(any())).then(invocation -> {
        var callback = invocation.getArgument(0);
        return callback.doInTransaction(null);
    });

    // Act
    service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

    // Assert
    verify(cancelamentoRepository, times(2))
            .getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(any(), any(), any(), any());
}

@Captor
ArgumentCaptor<PageRequest> pageRequestCaptor;

@Test
void devePassarParametrosCorretosAoRepositorio() {
    // Arrange
    MockitoAnnotations.openMocks(this); // inicializa @Captor
    Page<String> page = new PageImpl<>(List.of("cod1"), PageRequest.of(0, 1000), 1);
    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(PageRequest.class), eq("PAGADOR"), anyList(), any(LocalDateTime.class)
    )).thenReturn(page).thenReturn(new PageImpl<>(List.of()));

    when(transactionTemplate.execute(any())).then(invocation -> {
        var callback = invocation.getArgument(0);
        return callback.doInTransaction(null);
    });

    // Act
    service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

    // Assert
    verify(cancelamentoRepository, atLeastOnce())
            .getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                    pageRequestCaptor.capture(), eq("PAGADOR"), anyList(), any());

    PageRequest requisicao = pageRequestCaptor.getValue();
    assertEquals(0, requisicao.getPageNumber());
    assertEquals(1000, requisicao.getPageSize());
}

@Test
void devePararIteracaoSePrimeiraPaginaNaoTemConteudo() {
    // Arrange
    Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(0, 1000), 0);

    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(PageRequest.class), eq("PAGADOR"), anyList(), any(LocalDateTime.class)
    )).thenReturn(paginaVazia);

    // Act
    service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

    // Assert
    verify(cancelamentoRepository, times(1)).getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(), any(), any(), any());
    verifyNoInteractions(transactionTemplate);
}

@Test
void deveLancarExcecaoAoFalharAtualizacaoStatus() {
    // Arrange
    List<String> codigos = List.of("cod1");
    Page<String> paginaComErro = new PageImpl<>(codigos, PageRequest.of(0, 1000), 1);
    Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(1, 1000), 1);

    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(), any(), any(), any()
    )).thenReturn(paginaComErro).thenReturn(paginaVazia);

    doThrow(new RuntimeException("Erro ao atualizar"))
            .when(service).atualizarStatusCancelamento(eq(codigos));

    // Act & Assert
    assertThrows(RuntimeException.class, () -> service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService());
}

@Test
void deveUsarDataLimiteCorreta() {
    // Arrange
    Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(0, 1000), 0);

    ArgumentCaptor<LocalDateTime> dataLimiteCaptor = ArgumentCaptor.forClass(LocalDateTime.class);

    when(cancelamentoRepository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
            any(), any(), any(), dataLimiteCaptor.capture()))
            .thenReturn(paginaVazia);

    // Act
    service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

    // Assert
    LocalDateTime dataLimiteUsada = dataLimiteCaptor.getValue();
    LocalDateTime esperado = LocalDateTime.now().minusHours(12);

    long diferencaEmSegundos = Math.abs(dataLimiteUsada.until(esperado, java.time.temporal.ChronoUnit.SECONDS));

    // Tolerância de alguns segundos para execução do teste
    assertTrue(diferencaEmSegundos < 5);
}

