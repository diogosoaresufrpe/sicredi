https://wiki.sicredi.io/display/HDEDS/Golden+Paths

https://teams.sicredi.io/secure/Dashboard.jspa


teste alterando
teste alterando
teste alterando
teste alterando
teste alterando
teste alterando

import br.com.sicredi.pix.core.repository.RecorrenciaInstrucaoPagamentoCancelamentoRepository;
import br.com.sicredi.pix.core.service.impl.ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Slice;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.IntStream;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest {

    private RecorrenciaInstrucaoPagamentoCancelamentoRepository repository;
    private ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl service;

    @BeforeEach
    void setUp() {
        repository = mock(RecorrenciaInstrucaoPagamentoCancelamentoRepository.class);

        // Simula uma instância do service que tenha acesso ao método privado/protegido
        service = spy(new ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl(null));
        doReturn(repository).when(service).getRecorrenciaInstrucaoPagamentoCancelamentoRepository(); // adapte conforme necessário
    }

    @Test
    void deveProcessarPaginasComConteudo() {
        // Arrange
        var dataLimite = LocalDateTime.now().minusHours(12);
        var conteudoPagina1 = List.of("abc123", "def456");
        var conteudoPagina2 = List.of("ghi789");

        Slice<String> slice1 = mock(Slice.class);
        when(slice1.getContent()).thenReturn(conteudoPagina1);
        when(slice1.hasContent()).thenReturn(true);

        Slice<String> slice2 = mock(Slice.class);
        when(slice2.getContent()).thenReturn(conteudoPagina2);
        when(slice2.hasContent()).thenReturn(true);

        Slice<String> sliceVazio = mock(Slice.class);
        when(sliceVazio.hasContent()).thenReturn(false);

        // Simula retorno paginado
        when(repository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                any(), any(), any(), any()))
            .thenReturn(slice1)  // página 0
            .thenReturn(slice2)  // página 1
            .thenReturn(sliceVazio); // página 2

        // Mock do método que processa os dados
        doNothing().when(service).atualizarStatusCancelamento(anyList());

        // Act
        service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

        // Assert: verifica que o método foi chamado para cada página com conteúdo
        ArgumentCaptor<List<String>> captor = ArgumentCaptor.forClass(List.class);
        verify(service, times(2)).atualizarStatusCancelamento(captor.capture());

        List<List<String>> chamadas = captor.getAllValues();
        assertEquals(2, chamadas.size());
        assertEquals(conteudoPagina1, chamadas.get(0));
        assertEquals(conteudoPagina2, chamadas.get(1));
    }
}



-----------------------------------------------------------------


package io.sicredi.spirecorrencia.api.automatico.instrucaopagamentocancelamento;

import br.com.sicredi.spicanais.transacional.transport.lib.commons.enums.TipoPessoaEnum;
import io.sicredi.spirecorrencia.api.automatico.SolicitacaoAutorizacaoRecorrencia;
import io.sicredi.spirecorrencia.api.automatico.SolicitacaoAutorizacaoRecorrenciaRepository;
import io.sicredi.spirecorrencia.api.automatico.enums.TipoStatusSolicitacaoAutorizacao;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;

import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest {

    @InjectMocks
    private ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImpl service;

    @Mock
    private RecorrenciaInstrucaoPagamentoCancelamentoRepository repository;


    @Test
    void deveProcessarPaginasComConteudo() {
        // Arrange
        List<String> conteudoPagina1 = List.of("abc123", "def456");
        List<String> conteudoPagina2 = List.of("ghi789");

        Page<String> pagina1 = new PageImpl<>(conteudoPagina1, PageRequest.of(0, 10), 20);
        Page<String> pagina2 = new PageImpl<>(conteudoPagina2, PageRequest.of(1, 10), 20);
        Page<String> paginaVazia = new PageImpl<>(List.of(), PageRequest.of(2, 10), 20);

        when(repository.getListaCodFimAFimByListStatusAndTipoPSPSolicitanteCancelamento(
                any(), any(), any(), any()))
                .thenReturn(pagina1)
                .thenReturn(pagina2)
                .thenReturn(paginaVazia);

        doNothing().when(service).atualizarStatusCancelamento(anyList());

        // Act
        service.atualizarConfirmacaoCancelamentoPixAutomaticoJobService();

        // Assert
        verify(service, times(2)).atualizarStatusCancelamento(anyList());
    }

}

--------------------------------------------

WARNING: A Java agent has been loaded dynamically (C:\Users\soares_diogo\.gradle\caches\modules-2\files-2.1\net.bytebuddy\byte-buddy-agent\1.14.18\417558ea01fe9f0e8a94af28b9469d281c4e3984\byte-buddy-agent-1.14.18.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release


Argument passed to when() is not a mock!
Example of correct stubbing:
    doThrow(new RuntimeException()).when(mock).someMethod();
org.mockito.exceptions.misusing.NotAMockException: 
Argument passed to when() is not a mock!
Example of correct stubbing:
    doThrow(new RuntimeException()).when(mock).someMethod();
	at io.sicredi.spirecorrencia.api.automatico.instrucaopagamentocancelamento.ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest.deveProcessarPaginasComConteudo(ConfirmacaoCancelamentoAposExpiracaoPixAutomaticoServiceImplTest.java:51)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)

