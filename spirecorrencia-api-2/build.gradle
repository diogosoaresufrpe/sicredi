plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.1'
    id 'io.freefair.lombok' version '8.10'
}

group = 'io.sicredi.spirecorrencia-api'
version = '1.0.0-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_21
compileJava.options.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://artifactory.sicredi.net/artifactory/repo" }
}

springBoot {
    buildInfo()
}

ext {
    set('sicrediVaultVersion', "2.4")
    set('sicrediObservability', "4.1.0")
    set('springCloudVersion', "2023.0.3")
    set('springdocVersion', '2.5.0')
    set('sicrediSpringWebExceptionsVersion', "2.0.0")
    set('oracleDatabaseJdbcDriverVersion', "23.4.0.24.05")
    set('observationDatasourceVersion', '1.0.3')
    set('spicanaisTransacionalTransportLibVersion', "2.3.0-rc23")
    set('sicrediExceptionVersion', "2.0.0")
    set("spiCommonsLib", "10.0.0-rc12")
    set('lombokVersion', "1.18.24")
    set('wiremockJre8StandaloneVersion', "2.35.0")
    set('coreLibVersion', "1.3.2")
    set('sicrediIdempotent', "1.1.4")
    set('feignMicrometerVersion', '13.2.1')
    set('wiremockLibVersion', "3.3.1")
    set('shedlockVersion', "6.0.2")
    set('encoding', "UTF-8")
    set('resilience4jVersion', '2.2.0')
    set("instancioVersion", "5.4.0")
}

dependencies {
    // Dependencias de Infraestrutura - Obrigatórias
    implementation "devops.sicredi:vault-springboot-starter:${sicrediVaultVersion}"
    implementation "io.sicredi.engineering.libraries:spring-boot-sicredi-observability:${sicrediObservability}"
    implementation "io.sicredi.engineering.libraries:spring-boot-sicredi-observability-otel-logs:${sicrediObservability}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-consul-config"
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'


    // Api Spring Web Mvc
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    //Opcionais
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'com.google.code.findbugs:findbugs-annotations:3.0.1'

    //Database
    implementation "com.oracle.database.jdbc:ojdbc11:${oracleDatabaseJdbcDriverVersion}"
    implementation "net.ttddyy.observation:datasource-micrometer-spring-boot:${observationDatasourceVersion}"

    // Canal
    implementation "br.com.sicredi.spicanais:spicanais-transacional-transport-lib:${spicanaisTransacionalTransportLibVersion}"

    // Produito
    implementation "io.sicredi.spiutils:commons-observabilidade:${coreLibVersion}"
    implementation "br.com.sicredi.spi:spi-commons-lib-dto:${spiCommonsLib}"
    implementation "br.com.sicredi.spi:spi-commons-lib-entity:${spiCommonsLib}"

    // Cliente Http
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation "io.github.openfeign:feign-micrometer:${feignMicrometerVersion}" //Tracing (Jaeger) do Feign

    //Idempotência
    implementation "io.sicredi.engineering.libraries:idempotent-transaction:${sicrediIdempotent}"

    // Exceptions
    implementation "br.com.sicredi.framework.web.spring:framework-web-spring-exception:${sicrediSpringWebExceptionsVersion}"

    //Jobs
    implementation "net.javacrumbs.shedlock:shedlock-spring:${shedlockVersion}"
    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:${shedlockVersion}"

    //Ratelimiter
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"

    // Testes
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.h2database:h2:2.2.224"
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation "org.wiremock:wiremock-standalone:${wiremockLibVersion}"
    testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    testCompileOnly 'com.google.code.findbugs:findbugs-annotations:3.0.1'
    testImplementation "org.instancio:instancio-junit:${instancioVersion}"

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor") {
        because "Geração de metadados das annotations do Spring Boot para interpretação pelas IDEs"
    }



}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

sourceSets {
    testIntegration {
        java.srcDir "$projectDir/src/test-integration/java"
        resources.srcDirs("$projectDir/src/main/resources", "$projectDir/src/test-integration/resources")
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

// Configuração das dependências
configurations {
    testIntegrationRuntime.extendsFrom testRuntime
    testIntegrationImplementation.extendsFrom testImplementation
}

// Criação de task que executa os testes de integração
tasks.register('testIntegration', Test) {
    testClassesDirs = sourceSets.testIntegration.output.classesDirs
    classpath = sourceSets.testIntegration.runtimeClasspath
}

// Definido JUnit como plataforma para execução dos testes de integração
testIntegration {
    systemProperty "testCycle", findProperty("testCycle")
    systemProperty "custom:componentVersion", findProperty("custom:componentVersion")
    useJUnitPlatform()
    failFast = true
    testLogging {
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        events "FAILED", "SKIPPED"
    }
    testIntegration.testLogging.showStandardStreams = true
}

check.dependsOn testIntegration


test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        events "FAILED", "SKIPPED"
    }
}

jib {
    from {
        image = "harbor.sicredi.net/openjdk/corretto:21-debian-slim"
    }
    container {
        jvmFlags = ['-noverify', '-XX:TieredStopAtLevel=1', '-Dfile.encoding=UTF8', '-Duser.timezone=America/Sao_Paulo']
        ports = ['8080']
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    // Merge dos relatórios de cobertura dos testes unitários e de integração
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))

    plugins.withType(JacocoPlugin) {
        test.finalizedBy 'jacocoTestReport'
        testIntegration.finalizedBy 'jacocoTestReport'
    }
}
